#!/usr/bin/python
# Script Name: pharospopup
# Script Function:
#	This is a CUPS backend for the Pharos Remote Printing LPD Server.
# Save this file in your CUPS backend directory, usually
# /usr/lib/cups/backend/ or /usr/local/lib/cups/backend/
#
# Mark this filter world-readable and world-executable. Restart CUPS to
# make the new backend known to the spooler.
#
# See http://www.openprinting.org/cups-doc.html and the additional
# instructions below.
#
# Usage: 
#
# cp pharos /usr/lib/cups/backend/
# chmod 755 /usr/lib/cups/backend/pharos
# killall -HUP cupsd (or "/etc/init.d/cups restart")
# lpadmin -p <queue name> -E -v pharos://<print server address>/<print queue>
#
# with 
#   <print server address>:     The DNS name or IP address of the print server
#   <print queue>:		The name of the LPD queue on the print server
# Example URIs:
# pharos://printserver.university.edu/HP_LaserJet
# 
#	This will print to a Pharos Uniprint Print server with DNS name printserver.university.edu and print queue HP_LaserJet
#
#
#
# Author: Junaid Ali
# Version: 1.0

__version__ = '1.0'
__title__ = 'CUPS backend for Pharos Remote Printing'
__doc__ = 'CUPS backend for popup based printing to Pharos LPD server'

# Imports ============================================
import sys
import dbus
import logging
import logging.config
from traceback import print_exc
import os

# Script Variables ===================================
loggingConfigFilePath = os.path.join(os.getcwd(), 'pharos.conf')

# Class Declaration ==================================







# Function Declaration ===============================
def main():
	"""
	The main function of the script
	"""
	print 'Running %s' %sys.argv[0]
	bus = dbus.SessionBus()
	try:
		remote_object = bus.get_object("org.pharos.PopupServer", "/PopupObject")
		printjobparams = remote_object.GetPrintJobParameters()		
	except dbus.DBusException:
		logger.warn('Error connecting to popup server')
		logger.warn(print_exc())
		sys.exit(1)
	logger.info('User ID received = %s' %printjobparams["userid"])
	logger.info('Print Command received = %s' %printjobparams["printjob"])

# Main Script ========================================
try:
	logging.config.fileConfig(loggingConfigFilePath)
	logger = logging.getLogger('pharos')	    
except (TypeError, ConfigParser.NoSectionError):
	syslog.syslog(syslog.LOG_ERR, '%s could not instantiate logging using config file %s. Exiting' %(sys.argv[0], loggingConfigFilePath))
	sys.exit(1)
if __name__ == "__main__":
	main()
